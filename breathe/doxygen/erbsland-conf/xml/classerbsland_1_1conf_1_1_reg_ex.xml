<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classerbsland_1_1conf_1_1_reg_ex" kind="class" language="C++" prot="public">
    <compoundname>erbsland::conf::RegEx</compoundname>
    <includes refid="_reg_ex_8hpp" local="no">erbsland/conf/RegEx.hpp</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classerbsland_1_1conf_1_1_reg_ex_1aa4d061375c3346e8e5ab0901e680e6a3" prot="private" static="no" mutable="no">
        <type><ref refid="classerbsland_1_1conf_1_1_string" kindref="compound">String</ref></type>
        <definition>String erbsland::conf::RegEx::_text</definition>
        <argsstring></argsstring>
        <name>_text</name>
        <qualifiedname>erbsland::conf::RegEx::_text</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/RegEx.hpp" line="40" column="12" bodyfile="erbsland/conf/RegEx.hpp" bodystart="40" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classerbsland_1_1conf_1_1_reg_ex_1ac2da87fe669df31bc8291805d29a738a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>erbsland::conf::RegEx::RegEx</definition>
        <argsstring>()=default</argsstring>
        <name>RegEx</name>
        <qualifiedname>erbsland::conf::RegEx::RegEx</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create an empty regular expression value. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/RegEx.hpp" line="20" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classerbsland_1_1conf_1_1_reg_ex_1a3eb73f1d23cf7e5711369ee8a6aa76be" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>erbsland::conf::RegEx::RegEx</definition>
        <argsstring>(String text)</argsstring>
        <name>RegEx</name>
        <qualifiedname>erbsland::conf::RegEx::RegEx</qualifiedname>
        <param>
          <type><ref refid="classerbsland_1_1conf_1_1_string" kindref="compound">String</ref></type>
          <declname>text</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a regular expression value from the given string.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>text</parametername>
</parameternamelist>
<parameterdescription>
<para>The text. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/RegEx.hpp" line="26" column="14" bodyfile="erbsland/conf/RegEx.hpp" bodystart="26" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="classerbsland_1_1conf_1_1_reg_ex_1a1a23e23379d959bc93118ae3bf710ddb" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool erbsland::conf::RegEx::operator==</definition>
        <argsstring>(const RegEx &amp;other) const noexcept</argsstring>
        <name>operator==</name>
        <qualifiedname>erbsland::conf::RegEx::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classerbsland_1_1conf_1_1_reg_ex" kindref="compound">RegEx</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Compare for equality. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/RegEx.hpp" line="30" column="10" bodyfile="erbsland/conf/RegEx.hpp" bodystart="30" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="classerbsland_1_1conf_1_1_reg_ex_1a6c63eab3ebe99e56f4e107ace0086a43" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool erbsland::conf::RegEx::operator!=</definition>
        <argsstring>(const RegEx &amp;other) const noexcept</argsstring>
        <name>operator!=</name>
        <qualifiedname>erbsland::conf::RegEx::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="classerbsland_1_1conf_1_1_reg_ex" kindref="compound">RegEx</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Compare for inequality. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/RegEx.hpp" line="32" column="10" bodyfile="erbsland/conf/RegEx.hpp" bodystart="32" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="classerbsland_1_1conf_1_1_reg_ex_1acf28a102de18764c1f24eefabdacff8c" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classerbsland_1_1conf_1_1_string" kindref="compound">String</ref> &amp;</type>
        <definition>const String &amp; erbsland::conf::RegEx::toText</definition>
        <argsstring>() const noexcept</argsstring>
        <name>toText</name>
        <qualifiedname>erbsland::conf::RegEx::toText</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the text for this regular expression. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/RegEx.hpp" line="37" column="19" bodyfile="erbsland/conf/RegEx.hpp" bodystart="37" bodyend="37"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>A class to mark text are regular expressions. </para>
    </detaileddescription>
    <location file="erbsland/conf/RegEx.hpp" line="16" column="1" bodyfile="erbsland/conf/RegEx.hpp" bodystart="16" bodyend="41"/>
    <listofallmembers>
      <member refid="classerbsland_1_1conf_1_1_reg_ex_1aa4d061375c3346e8e5ab0901e680e6a3" prot="private" virt="non-virtual"><scope>erbsland::conf::RegEx</scope><name>_text</name></member>
      <member refid="classerbsland_1_1conf_1_1_reg_ex_1a6c63eab3ebe99e56f4e107ace0086a43" prot="public" virt="non-virtual"><scope>erbsland::conf::RegEx</scope><name>operator!=</name></member>
      <member refid="classerbsland_1_1conf_1_1_reg_ex_1a1a23e23379d959bc93118ae3bf710ddb" prot="public" virt="non-virtual"><scope>erbsland::conf::RegEx</scope><name>operator==</name></member>
      <member refid="classerbsland_1_1conf_1_1_reg_ex_1ac2da87fe669df31bc8291805d29a738a" prot="public" virt="non-virtual"><scope>erbsland::conf::RegEx</scope><name>RegEx</name></member>
      <member refid="classerbsland_1_1conf_1_1_reg_ex_1a3eb73f1d23cf7e5711369ee8a6aa76be" prot="public" virt="non-virtual"><scope>erbsland::conf::RegEx</scope><name>RegEx</name></member>
      <member refid="classerbsland_1_1conf_1_1_reg_ex_1acf28a102de18764c1f24eefabdacff8c" prot="public" virt="non-virtual"><scope>erbsland::conf::RegEx</scope><name>toText</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
