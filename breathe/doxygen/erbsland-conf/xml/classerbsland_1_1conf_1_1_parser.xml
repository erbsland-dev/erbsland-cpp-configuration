<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classerbsland_1_1conf_1_1_parser" kind="class" language="C++" prot="public" final="yes">
    <compoundname>erbsland::conf::Parser</compoundname>
    <includes refid="_parser_8hpp" local="no">erbsland/conf/Parser.hpp</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classerbsland_1_1conf_1_1_parser_1a1a66caa06c6bba6908bffcd605bbbaa2" prot="private" static="no" mutable="no">
        <type>impl::ParserSettings</type>
        <definition>impl::ParserSettings erbsland::conf::Parser::_settings</definition>
        <argsstring></argsstring>
        <name>_settings</name>
        <qualifiedname>erbsland::conf::Parser::_settings</qualifiedname>
        <briefdescription>
<para>The parser settings. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/Parser.hpp" line="88" column="26" bodyfile="erbsland/conf/Parser.hpp" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classerbsland_1_1conf_1_1_parser_1a92509f0350a54812e31178450e018121" prot="private" static="no" mutable="no">
        <type>std::optional&lt; <ref refid="classerbsland_1_1conf_1_1_error" kindref="compound">Error</ref> &gt;</type>
        <definition>std::optional&lt;Error&gt; erbsland::conf::Parser::_lastError</definition>
        <argsstring></argsstring>
        <name>_lastError</name>
        <qualifiedname>erbsland::conf::Parser::_lastError</qualifiedname>
        <briefdescription>
<para>The last error that occurred. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/Parser.hpp" line="89" column="19" bodyfile="erbsland/conf/Parser.hpp" bodystart="89" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classerbsland_1_1conf_1_1_parser_1a36bcc51a6d61089e94188e4f2f6353af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>erbsland::conf::Parser::Parser</definition>
        <argsstring>()=default</argsstring>
        <name>Parser</name>
        <qualifiedname>erbsland::conf::Parser::Parser</qualifiedname>
        <briefdescription>
<para>Default constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/Parser.hpp" line="31" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classerbsland_1_1conf_1_1_parser_1a58fcdbe88d6033c2b3e23c967c8b6ee0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>erbsland::conf::Parser::~Parser</definition>
        <argsstring>()=default</argsstring>
        <name>~Parser</name>
        <qualifiedname>erbsland::conf::Parser::~Parser</qualifiedname>
        <briefdescription>
<para>Default destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/Parser.hpp" line="33" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classerbsland_1_1conf_1_1_parser_1ad64c05722c3691bfae839965422fe350" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void erbsland::conf::Parser::setSourceResolver</definition>
        <argsstring>(const SourceResolverPtr &amp;sourceResolver) noexcept</argsstring>
        <name>setSourceResolver</name>
        <qualifiedname>erbsland::conf::Parser::setSourceResolver</qualifiedname>
        <param>
          <type>const SourceResolverPtr &amp;</type>
          <declname>sourceResolver</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set a custom source resolver used to resolve include directives while parsing.</para>
<para>By default, an instance of <computeroutput><ref refid="classerbsland_1_1conf_1_1_file_source_resolver" kindref="compound">FileSourceResolver</ref></computeroutput> is used, which supports file-based includes, as specified in the format recommended in the documentation.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sourceResolver</parametername>
</parameternamelist>
<parameterdescription>
<para>The custom source resolver, or <computeroutput>nullptr</computeroutput> to disable the <computeroutput>include</computeroutput> meta-command. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/Parser.hpp" line="43" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classerbsland_1_1conf_1_1_parser_1a2f872d919d6efca50efad33577565484" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void erbsland::conf::Parser::setAccessCheck</definition>
        <argsstring>(const AccessCheckPtr &amp;accessCheck) noexcept</argsstring>
        <name>setAccessCheck</name>
        <qualifiedname>erbsland::conf::Parser::setAccessCheck</qualifiedname>
        <param>
          <type>const AccessCheckPtr &amp;</type>
          <declname>accessCheck</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set a custom access check.</para>
<para>By default, an instance of <computeroutput><ref refid="classerbsland_1_1conf_1_1_file_access_check" kindref="compound">FileAccessCheck</ref></computeroutput> with default options is used. This instance limits included files to the same directory and subdirectories of the including configuration.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>accessCheck</parametername>
</parameternamelist>
<parameterdescription>
<para>An instance of a source access check implementation, or <computeroutput>nullptr</computeroutput> to disable the <computeroutput>include</computeroutput> meta-command. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/Parser.hpp" line="53" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classerbsland_1_1conf_1_1_parser_1a039fc014a0d7588b47b93d59a3498454" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void erbsland::conf::Parser::setSignatureValidator</definition>
        <argsstring>(const SignatureValidatorPtr &amp;signatureValidator) noexcept</argsstring>
        <name>setSignatureValidator</name>
        <qualifiedname>erbsland::conf::Parser::setSignatureValidator</qualifiedname>
        <param>
          <type>const SignatureValidatorPtr &amp;</type>
          <declname>signatureValidator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set a signature validator.</para>
<para>By default, no signature validator is set. This allows parsing all unsigned configuration documents. Documents with a <computeroutput>signature</computeroutput> meta-value get rejected by the parser.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>signatureValidator</parametername>
</parameternamelist>
<parameterdescription>
<para>An instance of a signature validator implementation, or <computeroutput>nullptr</computeroutput> to disable signature validation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/Parser.hpp" line="63" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classerbsland_1_1conf_1_1_parser_1a77ff1d08ea10557fe62858801613b8cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DocumentPtr</type>
        <definition>DocumentPtr erbsland::conf::Parser::parseOrThrow</definition>
        <argsstring>(const SourcePtr &amp;source)</argsstring>
        <name>parseOrThrow</name>
        <qualifiedname>erbsland::conf::Parser::parseOrThrow</qualifiedname>
        <param>
          <type>const SourcePtr &amp;</type>
          <declname>source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Parse the given source into a configuration document and throw an exception on any error.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>The source to parse. Should be closed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The root node of the parsed configuration tree. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classerbsland_1_1conf_1_1_error" kindref="compound">Error</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if there was any problem with the parsed source or document. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/Parser.hpp" line="71" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classerbsland_1_1conf_1_1_parser_1ac94d27e60a3905a300c4e12fd59f3cf8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DocumentPtr</type>
        <definition>DocumentPtr erbsland::conf::Parser::parse</definition>
        <argsstring>(const SourcePtr &amp;source)</argsstring>
        <name>parse</name>
        <qualifiedname>erbsland::conf::Parser::parse</qualifiedname>
        <param>
          <type>const SourcePtr &amp;</type>
          <declname>source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Parse the given source into a configuration document.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>The source to parse. Should be closed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The root node of the parsed configuration tree or nullptr on any error. Use <computeroutput><ref refid="classerbsland_1_1conf_1_1_parser_1ae189977a87681680cc9f9ed754870a65" kindref="member">lastError()</ref></computeroutput> to access the last error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/Parser.hpp" line="79" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classerbsland_1_1conf_1_1_parser_1ae189977a87681680cc9f9ed754870a65" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classerbsland_1_1conf_1_1_error" kindref="compound">Error</ref></type>
        <definition>Error erbsland::conf::Parser::lastError</definition>
        <argsstring>() const noexcept</argsstring>
        <name>lastError</name>
        <qualifiedname>erbsland::conf::Parser::lastError</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Access the last error.</para>
<para><simplesect kind="return"><para>The error object of the last error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/Parser.hpp" line="85" column="11"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>This parser reads the Erbsland Configuration Language.</para>
<para><emphasis>Multithreading</emphasis>: This parser is <bold>reentrant</bold>, and therefore it can be used in multiple threads, as long each thread uses an individual instance of the parser.</para>
<para><simplesect kind="par"><title>Tested:</title><para><computeroutput>ParserAccessTest</computeroutput>, <computeroutput>ParserBasicTest</computeroutput>, <computeroutput>ParserComplianceTest</computeroutput>, <computeroutput>ParserErrorClassTest</computeroutput>, <computeroutput>ParserIncludeTest</computeroutput>, <computeroutput>ParserSignatureTest</computeroutput> </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="erbsland/conf/Parser.hpp" line="28" column="1" bodyfile="erbsland/conf/Parser.hpp" bodystart="28" bodyend="90"/>
    <listofallmembers>
      <member refid="classerbsland_1_1conf_1_1_parser_1a92509f0350a54812e31178450e018121" prot="private" virt="non-virtual"><scope>erbsland::conf::Parser</scope><name>_lastError</name></member>
      <member refid="classerbsland_1_1conf_1_1_parser_1a1a66caa06c6bba6908bffcd605bbbaa2" prot="private" virt="non-virtual"><scope>erbsland::conf::Parser</scope><name>_settings</name></member>
      <member refid="classerbsland_1_1conf_1_1_parser_1ae189977a87681680cc9f9ed754870a65" prot="public" virt="non-virtual"><scope>erbsland::conf::Parser</scope><name>lastError</name></member>
      <member refid="classerbsland_1_1conf_1_1_parser_1ac94d27e60a3905a300c4e12fd59f3cf8" prot="public" virt="non-virtual"><scope>erbsland::conf::Parser</scope><name>parse</name></member>
      <member refid="classerbsland_1_1conf_1_1_parser_1a77ff1d08ea10557fe62858801613b8cb" prot="public" virt="non-virtual"><scope>erbsland::conf::Parser</scope><name>parseOrThrow</name></member>
      <member refid="classerbsland_1_1conf_1_1_parser_1a36bcc51a6d61089e94188e4f2f6353af" prot="public" virt="non-virtual"><scope>erbsland::conf::Parser</scope><name>Parser</name></member>
      <member refid="classerbsland_1_1conf_1_1_parser_1a2f872d919d6efca50efad33577565484" prot="public" virt="non-virtual"><scope>erbsland::conf::Parser</scope><name>setAccessCheck</name></member>
      <member refid="classerbsland_1_1conf_1_1_parser_1a039fc014a0d7588b47b93d59a3498454" prot="public" virt="non-virtual"><scope>erbsland::conf::Parser</scope><name>setSignatureValidator</name></member>
      <member refid="classerbsland_1_1conf_1_1_parser_1ad64c05722c3691bfae839965422fe350" prot="public" virt="non-virtual"><scope>erbsland::conf::Parser</scope><name>setSourceResolver</name></member>
      <member refid="classerbsland_1_1conf_1_1_parser_1a58fcdbe88d6033c2b3e23c967c8b6ee0" prot="public" virt="non-virtual"><scope>erbsland::conf::Parser</scope><name>~Parser</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
