<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classerbsland_1_1conf_1_1_value_iterator" kind="class" language="C++" prot="public" final="yes">
    <compoundname>erbsland::conf::ValueIterator</compoundname>
    <includes refid="_value_iterator_8hpp" local="no">erbsland/conf/ValueIterator.hpp</includes>
    <sectiondef kind="user-defined">
      <header>Construction and Assignment</header>
      <memberdef kind="function" id="classerbsland_1_1conf_1_1_value_iterator_1adb5ba7c259e28ec277de144d37f68bc0" prot="public" static="no" constexpr="yes" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr erbsland::conf::ValueIterator::ValueIterator</definition>
        <argsstring>(WrappedIterator it)</argsstring>
        <name>ValueIterator</name>
        <qualifiedname>erbsland::conf::ValueIterator::ValueIterator</qualifiedname>
        <param>
          <type>WrappedIterator</type>
          <declname>it</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create an iterator wrapping the given internal iterator.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>it</parametername>
</parameternamelist>
<parameterdescription>
<para>The iterator to wrap. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/ValueIterator.hpp" line="53" column="24" bodyfile="erbsland/conf/ValueIterator.hpp" bodystart="53" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="classerbsland_1_1conf_1_1_value_iterator_1a2f54e373f978f8ad3b751390ed8ca2db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>erbsland::conf::ValueIterator::ValueIterator</definition>
        <argsstring>()=default</argsstring>
        <name>ValueIterator</name>
        <qualifiedname>erbsland::conf::ValueIterator::ValueIterator</qualifiedname>
        <briefdescription>
<para>Default constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/ValueIterator.hpp" line="56" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classerbsland_1_1conf_1_1_value_iterator_1aaf8461f4945bc11a0085efa8d846232b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>erbsland::conf::ValueIterator::~ValueIterator</definition>
        <argsstring>()=default</argsstring>
        <name>~ValueIterator</name>
        <qualifiedname>erbsland::conf::ValueIterator::~ValueIterator</qualifiedname>
        <briefdescription>
<para>Default destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/ValueIterator.hpp" line="58" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classerbsland_1_1conf_1_1_value_iterator_1aadc2887495734c0c6a7187d44bd41419" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>erbsland::conf::ValueIterator::ValueIterator</definition>
        <argsstring>(const ValueIterator &amp;)=default</argsstring>
        <name>ValueIterator</name>
        <qualifiedname>erbsland::conf::ValueIterator::ValueIterator</qualifiedname>
        <param>
          <type>const <ref refid="classerbsland_1_1conf_1_1_value_iterator" kindref="compound">ValueIterator</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Default copy constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/ValueIterator.hpp" line="60" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classerbsland_1_1conf_1_1_value_iterator_1a6dcb49426ea1793456f73d340d5e7aba" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>erbsland::conf::ValueIterator::ValueIterator</definition>
        <argsstring>(ValueIterator &amp;&amp;) noexcept=default</argsstring>
        <name>ValueIterator</name>
        <qualifiedname>erbsland::conf::ValueIterator::ValueIterator</qualifiedname>
        <param>
          <type><ref refid="classerbsland_1_1conf_1_1_value_iterator" kindref="compound">ValueIterator</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
<para>Default move constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/ValueIterator.hpp" line="62" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classerbsland_1_1conf_1_1_value_iterator_1a69158011f2abaa3f0df2155cb3f8ad0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classerbsland_1_1conf_1_1_value_iterator" kindref="compound">ValueIterator</ref> &amp;</type>
        <definition>ValueIterator &amp; erbsland::conf::ValueIterator::operator=</definition>
        <argsstring>(const ValueIterator &amp;)=default</argsstring>
        <name>operator=</name>
        <qualifiedname>erbsland::conf::ValueIterator::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classerbsland_1_1conf_1_1_value_iterator" kindref="compound">ValueIterator</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Default copy assignment. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/ValueIterator.hpp" line="64" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classerbsland_1_1conf_1_1_value_iterator_1a212450d926803cf235e9affdb0c7ee75" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classerbsland_1_1conf_1_1_value_iterator" kindref="compound">ValueIterator</ref> &amp;</type>
        <definition>ValueIterator &amp; erbsland::conf::ValueIterator::operator=</definition>
        <argsstring>(ValueIterator &amp;&amp;) noexcept=default</argsstring>
        <name>operator=</name>
        <qualifiedname>erbsland::conf::ValueIterator::operator=</qualifiedname>
        <param>
          <type><ref refid="classerbsland_1_1conf_1_1_value_iterator" kindref="compound">ValueIterator</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
<para>Default move assignment. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/ValueIterator.hpp" line="66" column="19"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>Operators</header>
      <memberdef kind="function" id="classerbsland_1_1conf_1_1_value_iterator_1ab578a32f287b5602484e37e22881649e" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>reference</type>
        <definition>reference erbsland::conf::ValueIterator::operator*</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator*</name>
        <qualifiedname>erbsland::conf::ValueIterator::operator*</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Dereference operator. <simplesect kind="return"><para>A shared pointer to the current value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/ValueIterator.hpp" line="75" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classerbsland_1_1conf_1_1_value_iterator_1a4e6dbc8d0909d9b26212a61222bd4b57" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>pointer</type>
        <definition>pointer erbsland::conf::ValueIterator::operator-&gt;</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator-&gt;</name>
        <qualifiedname>erbsland::conf::ValueIterator::operator-&gt;</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Member access operator. <simplesect kind="return"><para>A pointer to the current value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/ValueIterator.hpp" line="79" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classerbsland_1_1conf_1_1_value_iterator_1a0fbc0bb719e463407b95c2b7d761911f" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classerbsland_1_1conf_1_1_value_iterator" kindref="compound">ValueIterator</ref> &amp;</type>
        <definition>ValueIterator &amp; erbsland::conf::ValueIterator::operator++</definition>
        <argsstring>() noexcept</argsstring>
        <name>operator++</name>
        <qualifiedname>erbsland::conf::ValueIterator::operator++</qualifiedname>
        <briefdescription>
<para>Prefix increment. Advances the iterator to the next element. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/ValueIterator.hpp" line="82" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classerbsland_1_1conf_1_1_value_iterator_1a10c0cd281abe5f83739c68ba26e1c75c" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classerbsland_1_1conf_1_1_value_iterator" kindref="compound">ValueIterator</ref></type>
        <definition>ValueIterator erbsland::conf::ValueIterator::operator++</definition>
        <argsstring>(int) noexcept</argsstring>
        <name>operator++</name>
        <qualifiedname>erbsland::conf::ValueIterator::operator++</qualifiedname>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
<para>Postfix increment. Advances the iterator and returns the previous state. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/ValueIterator.hpp" line="85" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classerbsland_1_1conf_1_1_value_iterator_1aaa438f88f9f7db3828e380494b7aa938" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool erbsland::conf::ValueIterator::operator==</definition>
        <argsstring>(const ValueIterator &amp;other) const noexcept</argsstring>
        <name>operator==</name>
        <qualifiedname>erbsland::conf::ValueIterator::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classerbsland_1_1conf_1_1_value_iterator" kindref="compound">ValueIterator</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Equality comparison. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other iterator for comparison. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/ValueIterator.hpp" line="89" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classerbsland_1_1conf_1_1_value_iterator_1a94281be19b9731900b363346e3b6100e" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool erbsland::conf::ValueIterator::operator!=</definition>
        <argsstring>(const ValueIterator &amp;other) const noexcept</argsstring>
        <name>operator!=</name>
        <qualifiedname>erbsland::conf::ValueIterator::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="classerbsland_1_1conf_1_1_value_iterator" kindref="compound">ValueIterator</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Inequality comparison. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other iterator for comparison. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/ValueIterator.hpp" line="93" column="11"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classerbsland_1_1conf_1_1_value_iterator_1a40462fdd1fb55484c672822ccf3e643c" prot="private" static="no">
        <type>std::vector&lt; impl::ValuePtr &gt;::const_iterator</type>
        <definition>using erbsland::conf::ValueIterator::WrappedIterator =  std::vector&lt;impl::ValuePtr&gt;::const_iterator</definition>
        <argsstring></argsstring>
        <name>WrappedIterator</name>
        <qualifiedname>erbsland::conf::ValueIterator::WrappedIterator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/ValueIterator.hpp" line="32" column="5" bodyfile="erbsland/conf/ValueIterator.hpp" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classerbsland_1_1conf_1_1_value_iterator_1a6ede7e2ec0b578db76dd0015b10dc353" prot="private" static="no">
        <type>std::forward_iterator_tag</type>
        <definition>using erbsland::conf::ValueIterator::iterator_category =  std::forward_iterator_tag</definition>
        <argsstring></argsstring>
        <name>iterator_category</name>
        <qualifiedname>erbsland::conf::ValueIterator::iterator_category</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/ValueIterator.hpp" line="36" column="5" bodyfile="erbsland/conf/ValueIterator.hpp" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classerbsland_1_1conf_1_1_value_iterator_1aee35e8d7bb808560a5bdf96f64f1e4e6" prot="private" static="no">
        <type>const ValuePtr</type>
        <definition>using erbsland::conf::ValueIterator::value_type =  const ValuePtr</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <qualifiedname>erbsland::conf::ValueIterator::value_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/ValueIterator.hpp" line="38" column="5" bodyfile="erbsland/conf/ValueIterator.hpp" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classerbsland_1_1conf_1_1_value_iterator_1a99061d6060e609c21f89386f417847b2" prot="private" static="no">
        <type>std::ptrdiff_t</type>
        <definition>using erbsland::conf::ValueIterator::difference_type =  std::ptrdiff_t</definition>
        <argsstring></argsstring>
        <name>difference_type</name>
        <qualifiedname>erbsland::conf::ValueIterator::difference_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/ValueIterator.hpp" line="40" column="5" bodyfile="erbsland/conf/ValueIterator.hpp" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classerbsland_1_1conf_1_1_value_iterator_1a6c18796ebc5d6274a27711b002010844" prot="private" static="no">
        <type>const ValuePtr</type>
        <definition>using erbsland::conf::ValueIterator::pointer =  const ValuePtr</definition>
        <argsstring></argsstring>
        <name>pointer</name>
        <qualifiedname>erbsland::conf::ValueIterator::pointer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/ValueIterator.hpp" line="42" column="5" bodyfile="erbsland/conf/ValueIterator.hpp" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classerbsland_1_1conf_1_1_value_iterator_1a8f3aca0ea8c7a49319ae3c12c58f171e" prot="private" static="no">
        <type>const ValuePtr</type>
        <definition>using erbsland::conf::ValueIterator::reference =  const ValuePtr</definition>
        <argsstring></argsstring>
        <name>reference</name>
        <qualifiedname>erbsland::conf::ValueIterator::reference</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/ValueIterator.hpp" line="44" column="5" bodyfile="erbsland/conf/ValueIterator.hpp" bodystart="44" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classerbsland_1_1conf_1_1_value_iterator_1a2f333bc56bed09b17bf48d089c4aa2ac" prot="private" static="no" mutable="no">
        <type>WrappedIterator</type>
        <definition>WrappedIterator erbsland::conf::ValueIterator::_current</definition>
        <argsstring></argsstring>
        <name>_current</name>
        <qualifiedname>erbsland::conf::ValueIterator::_current</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/ValueIterator.hpp" line="98" column="21" bodyfile="erbsland/conf/ValueIterator.hpp" bodystart="98" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Const iterator for the <computeroutput><ref refid="classerbsland_1_1conf_1_1_value" kindref="compound">Value</ref></computeroutput> class.</para>
<para>This is a simple wrapper around the iterator of the internally used container.</para>
<para><simplesect kind="par"><title>Tested:</title><para>Tested via <computeroutput><ref refid="classerbsland_1_1conf_1_1_value" kindref="compound">Value</ref></computeroutput> class. </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="erbsland/conf/ValueIterator.hpp" line="30" column="1" bodyfile="erbsland/conf/ValueIterator.hpp" bodystart="30" bodyend="99"/>
    <listofallmembers>
      <member refid="classerbsland_1_1conf_1_1_value_iterator_1a2f333bc56bed09b17bf48d089c4aa2ac" prot="private" virt="non-virtual"><scope>erbsland::conf::ValueIterator</scope><name>_current</name></member>
      <member refid="classerbsland_1_1conf_1_1_value_iterator_1a99061d6060e609c21f89386f417847b2" prot="private" virt="non-virtual"><scope>erbsland::conf::ValueIterator</scope><name>difference_type</name></member>
      <member refid="classerbsland_1_1conf_1_1_value_iterator_1a6ede7e2ec0b578db76dd0015b10dc353" prot="private" virt="non-virtual"><scope>erbsland::conf::ValueIterator</scope><name>iterator_category</name></member>
      <member refid="classerbsland_1_1conf_1_1_value_iterator_1a94281be19b9731900b363346e3b6100e" prot="public" virt="non-virtual"><scope>erbsland::conf::ValueIterator</scope><name>operator!=</name></member>
      <member refid="classerbsland_1_1conf_1_1_value_iterator_1ab578a32f287b5602484e37e22881649e" prot="public" virt="non-virtual"><scope>erbsland::conf::ValueIterator</scope><name>operator*</name></member>
      <member refid="classerbsland_1_1conf_1_1_value_iterator_1a0fbc0bb719e463407b95c2b7d761911f" prot="public" virt="non-virtual"><scope>erbsland::conf::ValueIterator</scope><name>operator++</name></member>
      <member refid="classerbsland_1_1conf_1_1_value_iterator_1a10c0cd281abe5f83739c68ba26e1c75c" prot="public" virt="non-virtual"><scope>erbsland::conf::ValueIterator</scope><name>operator++</name></member>
      <member refid="classerbsland_1_1conf_1_1_value_iterator_1a4e6dbc8d0909d9b26212a61222bd4b57" prot="public" virt="non-virtual"><scope>erbsland::conf::ValueIterator</scope><name>operator-&gt;</name></member>
      <member refid="classerbsland_1_1conf_1_1_value_iterator_1a69158011f2abaa3f0df2155cb3f8ad0d" prot="public" virt="non-virtual"><scope>erbsland::conf::ValueIterator</scope><name>operator=</name></member>
      <member refid="classerbsland_1_1conf_1_1_value_iterator_1a212450d926803cf235e9affdb0c7ee75" prot="public" virt="non-virtual"><scope>erbsland::conf::ValueIterator</scope><name>operator=</name></member>
      <member refid="classerbsland_1_1conf_1_1_value_iterator_1aaa438f88f9f7db3828e380494b7aa938" prot="public" virt="non-virtual"><scope>erbsland::conf::ValueIterator</scope><name>operator==</name></member>
      <member refid="classerbsland_1_1conf_1_1_value_iterator_1a6c18796ebc5d6274a27711b002010844" prot="private" virt="non-virtual"><scope>erbsland::conf::ValueIterator</scope><name>pointer</name></member>
      <member refid="classerbsland_1_1conf_1_1_value_iterator_1a8f3aca0ea8c7a49319ae3c12c58f171e" prot="private" virt="non-virtual"><scope>erbsland::conf::ValueIterator</scope><name>reference</name></member>
      <member refid="classerbsland_1_1conf_1_1_value_iterator_1aee35e8d7bb808560a5bdf96f64f1e4e6" prot="private" virt="non-virtual"><scope>erbsland::conf::ValueIterator</scope><name>value_type</name></member>
      <member refid="classerbsland_1_1conf_1_1_value_iterator_1adb5ba7c259e28ec277de144d37f68bc0" prot="public" virt="non-virtual"><scope>erbsland::conf::ValueIterator</scope><name>ValueIterator</name></member>
      <member refid="classerbsland_1_1conf_1_1_value_iterator_1a2f54e373f978f8ad3b751390ed8ca2db" prot="public" virt="non-virtual"><scope>erbsland::conf::ValueIterator</scope><name>ValueIterator</name></member>
      <member refid="classerbsland_1_1conf_1_1_value_iterator_1aadc2887495734c0c6a7187d44bd41419" prot="public" virt="non-virtual"><scope>erbsland::conf::ValueIterator</scope><name>ValueIterator</name></member>
      <member refid="classerbsland_1_1conf_1_1_value_iterator_1a6dcb49426ea1793456f73d340d5e7aba" prot="public" virt="non-virtual"><scope>erbsland::conf::ValueIterator</scope><name>ValueIterator</name></member>
      <member refid="classerbsland_1_1conf_1_1_value_iterator_1a40462fdd1fb55484c672822ccf3e643c" prot="private" virt="non-virtual"><scope>erbsland::conf::ValueIterator</scope><name>WrappedIterator</name></member>
      <member refid="classerbsland_1_1conf_1_1_value_iterator_1aaf8461f4945bc11a0085efa8d846232b" prot="public" virt="non-virtual"><scope>erbsland::conf::ValueIterator</scope><name>~ValueIterator</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
