<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classerbsland_1_1conf_1_1_error" kind="class" language="C++" prot="public" final="yes">
    <compoundname>erbsland::conf::Error</compoundname>
    <basecompoundref prot="public" virt="non-virtual">std::exception</basecompoundref>
    <includes refid="_error_8hpp" local="no">erbsland/conf/Error.hpp</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classerbsland_1_1conf_1_1_error_1a439837b7254b178d6b7207da044adb64" prot="private" static="no" mutable="no">
        <type><ref refid="classerbsland_1_1conf_1_1_error_category" kindref="compound">ErrorCategory</ref></type>
        <definition>ErrorCategory erbsland::conf::Error::_category</definition>
        <argsstring></argsstring>
        <name>_category</name>
        <qualifiedname>erbsland::conf::Error::_category</qualifiedname>
        <initializer>{<ref refid="classerbsland_1_1conf_1_1_error_category_1a0eba29c14803214d9be7aa42ed362493a0bcbcac219b1df2b6c76e274ab146b59" kindref="member">ErrorCategory::Internal</ref>}</initializer>
        <briefdescription>
<para>The error category. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/Error.hpp" line="149" column="19" bodyfile="erbsland/conf/Error.hpp" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="variable" id="classerbsland_1_1conf_1_1_error_1a1daab01999a888885e1e6cf39b46ad13" prot="private" static="no" mutable="no">
        <type><ref refid="classerbsland_1_1conf_1_1_string" kindref="compound">String</ref></type>
        <definition>String erbsland::conf::Error::_message</definition>
        <argsstring></argsstring>
        <name>_message</name>
        <qualifiedname>erbsland::conf::Error::_message</qualifiedname>
        <briefdescription>
<para>The message. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/Error.hpp" line="150" column="12" bodyfile="erbsland/conf/Error.hpp" bodystart="150" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classerbsland_1_1conf_1_1_error_1a6c2da1b98bf5e1f8dc15013fa5e6f89d" prot="private" static="no" mutable="no">
        <type>std::optional&lt; <ref refid="classerbsland_1_1conf_1_1_location" kindref="compound">Location</ref> &gt;</type>
        <definition>std::optional&lt;Location&gt; erbsland::conf::Error::_location</definition>
        <argsstring></argsstring>
        <name>_location</name>
        <qualifiedname>erbsland::conf::Error::_location</qualifiedname>
        <briefdescription>
<para>The optional location of the error. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/Error.hpp" line="151" column="19" bodyfile="erbsland/conf/Error.hpp" bodystart="151" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classerbsland_1_1conf_1_1_error_1a8ac24a787c01f238eac884a881338ebb" prot="private" static="no" mutable="no">
        <type>std::optional&lt; <ref refid="classerbsland_1_1conf_1_1_name_path" kindref="compound">NamePath</ref> &gt;</type>
        <definition>std::optional&lt;NamePath&gt; erbsland::conf::Error::_namePath</definition>
        <argsstring></argsstring>
        <name>_namePath</name>
        <qualifiedname>erbsland::conf::Error::_namePath</qualifiedname>
        <briefdescription>
<para>The optional name path of the error. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/Error.hpp" line="152" column="19" bodyfile="erbsland/conf/Error.hpp" bodystart="152" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classerbsland_1_1conf_1_1_error_1a466b35c2cb1c3496f7182088620aceb9" prot="private" static="no" mutable="no">
        <type>std::optional&lt; std::filesystem::path &gt;</type>
        <definition>std::optional&lt;std::filesystem::path&gt; erbsland::conf::Error::_filePath</definition>
        <argsstring></argsstring>
        <name>_filePath</name>
        <qualifiedname>erbsland::conf::Error::_filePath</qualifiedname>
        <briefdescription>
<para>The optional file path of the error. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/Error.hpp" line="153" column="19" bodyfile="erbsland/conf/Error.hpp" bodystart="153" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classerbsland_1_1conf_1_1_error_1aa2d27bd3a40e0ad4ebade1d80cd629a1" prot="private" static="no" mutable="no">
        <type>std::optional&lt; std::error_code &gt;</type>
        <definition>std::optional&lt;std::error_code&gt; erbsland::conf::Error::_errorCode</definition>
        <argsstring></argsstring>
        <name>_errorCode</name>
        <qualifiedname>erbsland::conf::Error::_errorCode</qualifiedname>
        <briefdescription>
<para>The optional error code. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/Error.hpp" line="154" column="19" bodyfile="erbsland/conf/Error.hpp" bodystart="154" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classerbsland_1_1conf_1_1_error_1a85a93cd65f4a677d769d629e50dbfe53" prot="private" static="no" mutable="yes">
        <type>std::string</type>
        <definition>std::string erbsland::conf::Error::_whatBuffer</definition>
        <argsstring></argsstring>
        <name>_whatBuffer</name>
        <qualifiedname>erbsland::conf::Error::_whatBuffer</qualifiedname>
        <briefdescription>
<para>An internal buffer for the <computeroutput><ref refid="classerbsland_1_1conf_1_1_error_1a5b3839edc8f84f36a50befa7e0fcdc33" kindref="member">what()</ref></computeroutput> method. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/Error.hpp" line="155" column="25" bodyfile="erbsland/conf/Error.hpp" bodystart="155" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classerbsland_1_1conf_1_1_error_1ae7e5520c64642c0c739141da27040f9a" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Msg</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>erbsland::conf::Error::Error</definition>
        <argsstring>(const ErrorCategory category, Msg &amp;&amp;message) noexcept</argsstring>
        <name>Error</name>
        <qualifiedname>erbsland::conf::Error::Error</qualifiedname>
        <param>
          <type>const <ref refid="classerbsland_1_1conf_1_1_error_category" kindref="compound">ErrorCategory</ref></type>
          <declname>category</declname>
        </param>
        <param>
          <type>Msg &amp;&amp;</type>
          <declname>message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new error with the given message.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>category</parametername>
</parameternamelist>
<parameterdescription>
<para>The error category. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The string with the message. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/Error.hpp" line="31" column="5" bodyfile="erbsland/conf/Error.hpp" bodystart="31" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="classerbsland_1_1conf_1_1_error_1a2fd722a56fefb67858e2f56be38ca844" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Msg</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type></type>
        <definition>erbsland::conf::Error::Error</definition>
        <argsstring>(const ErrorCategory category, Msg &amp;&amp;message, Args &amp;&amp;... args) noexcept</argsstring>
        <name>Error</name>
        <qualifiedname>erbsland::conf::Error::Error</qualifiedname>
        <param>
          <type>const <ref refid="classerbsland_1_1conf_1_1_error_category" kindref="compound">ErrorCategory</ref></type>
          <declname>category</declname>
        </param>
        <param>
          <type>Msg &amp;&amp;</type>
          <declname>message</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new error with the given message, location, and file path.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>category</parametername>
</parameternamelist>
<parameterdescription>
<para>The error category. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The string with the message. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional arguments for the error message. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/Error.hpp" line="46" column="5" bodyfile="erbsland/conf/Error.hpp" bodystart="46" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="classerbsland_1_1conf_1_1_error_1a161bb2ac9b20f59bf2dbb4366f2e5144" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>erbsland::conf::Error::Error</definition>
        <argsstring>(const Error &amp;) noexcept=default</argsstring>
        <name>Error</name>
        <qualifiedname>erbsland::conf::Error::Error</qualifiedname>
        <param>
          <type>const <ref refid="classerbsland_1_1conf_1_1_error" kindref="compound">Error</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Default copy constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/Error.hpp" line="57" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classerbsland_1_1conf_1_1_error_1a654ce86214a8278a00e79727800c020b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>erbsland::conf::Error::Error</definition>
        <argsstring>(Error &amp;&amp;) noexcept=default</argsstring>
        <name>Error</name>
        <qualifiedname>erbsland::conf::Error::Error</qualifiedname>
        <param>
          <type><ref refid="classerbsland_1_1conf_1_1_error" kindref="compound">Error</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
<para>Default move constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/Error.hpp" line="59" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classerbsland_1_1conf_1_1_error_1a084913126a29f591709952ca7c7d9dc6" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>erbsland::conf::Error::~Error</definition>
        <argsstring>() noexcept override=default</argsstring>
        <name>~Error</name>
        <qualifiedname>erbsland::conf::Error::~Error</qualifiedname>
        <briefdescription>
<para>Default destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/Error.hpp" line="61" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classerbsland_1_1conf_1_1_error_1a2e82fb93a505feac93de102f04fca38f" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classerbsland_1_1conf_1_1_error" kindref="compound">Error</ref> &amp;</type>
        <definition>Error &amp; erbsland::conf::Error::operator=</definition>
        <argsstring>(const Error &amp;) noexcept=default</argsstring>
        <name>operator=</name>
        <qualifiedname>erbsland::conf::Error::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classerbsland_1_1conf_1_1_error" kindref="compound">Error</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Default copy assignment. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/Error.hpp" line="63" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classerbsland_1_1conf_1_1_error_1add620b43205127e3b7ac44c7add698fe" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classerbsland_1_1conf_1_1_error" kindref="compound">Error</ref> &amp;</type>
        <definition>Error &amp; erbsland::conf::Error::operator=</definition>
        <argsstring>(Error &amp;&amp;) noexcept=default</argsstring>
        <name>operator=</name>
        <qualifiedname>erbsland::conf::Error::operator=</qualifiedname>
        <param>
          <type><ref refid="classerbsland_1_1conf_1_1_error" kindref="compound">Error</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
<para>Default move assignment. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/Error.hpp" line="65" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classerbsland_1_1conf_1_1_error_1a8d0eb1492021e62b248e23dade22845f" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classerbsland_1_1conf_1_1_error_category" kindref="compound">ErrorCategory</ref></type>
        <definition>ErrorCategory erbsland::conf::Error::category</definition>
        <argsstring>() const noexcept</argsstring>
        <name>category</name>
        <qualifiedname>erbsland::conf::Error::category</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the error category.</para>
<para><simplesect kind="return"><para>The error category. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/Error.hpp" line="72" column="20" bodyfile="erbsland/conf/Error.hpp" bodystart="72" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="classerbsland_1_1conf_1_1_error_1ab206982f6a258b3a124d1c4c4adb0c04" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classerbsland_1_1conf_1_1_string" kindref="compound">String</ref> &amp;</type>
        <definition>const String &amp; erbsland::conf::Error::message</definition>
        <argsstring>() const noexcept</argsstring>
        <name>message</name>
        <qualifiedname>erbsland::conf::Error::message</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Access the message.</para>
<para><simplesect kind="return"><para>The message text. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/Error.hpp" line="78" column="19" bodyfile="erbsland/conf/Error.hpp" bodystart="78" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="classerbsland_1_1conf_1_1_error_1a2b05d540de23acbedf20c47813c40e37" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classerbsland_1_1conf_1_1_location" kindref="compound">Location</ref></type>
        <definition>Location erbsland::conf::Error::location</definition>
        <argsstring>() const noexcept</argsstring>
        <name>location</name>
        <qualifiedname>erbsland::conf::Error::location</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Access the location.</para>
<para><simplesect kind="return"><para>The location, or an undefined location if none was set. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/Error.hpp" line="84" column="15" bodyfile="erbsland/conf/Error.hpp" bodystart="84" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="classerbsland_1_1conf_1_1_error_1addfdbb838a8e00abffa5170f7f2acd8b" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classerbsland_1_1conf_1_1_name_path" kindref="compound">NamePath</ref></type>
        <definition>NamePath erbsland::conf::Error::namePath</definition>
        <argsstring>() const noexcept</argsstring>
        <name>namePath</name>
        <qualifiedname>erbsland::conf::Error::namePath</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Access the name-path.</para>
<para><simplesect kind="return"><para>The name-path, or an empty name-path if none was set. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/Error.hpp" line="92" column="15" bodyfile="erbsland/conf/Error.hpp" bodystart="92" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="classerbsland_1_1conf_1_1_error_1a94bafd56dc0ae26523c349adf6e7e74b" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::filesystem::path</type>
        <definition>std::filesystem::path erbsland::conf::Error::filePath</definition>
        <argsstring>() const noexcept</argsstring>
        <name>filePath</name>
        <qualifiedname>erbsland::conf::Error::filePath</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Access the file path.</para>
<para><simplesect kind="return"><para>The file path, or an empty file path if none was set. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/Error.hpp" line="100" column="28" bodyfile="erbsland/conf/Error.hpp" bodystart="100" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classerbsland_1_1conf_1_1_error_1a3852a8152eeacb96dcd755053b578555" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::error_code</type>
        <definition>std::error_code erbsland::conf::Error::errorCode</definition>
        <argsstring>() const noexcept</argsstring>
        <name>errorCode</name>
        <qualifiedname>erbsland::conf::Error::errorCode</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Access the system-error code.</para>
<para><simplesect kind="return"><para>The system-error code, or an undefined one if none was set. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/Error.hpp" line="108" column="22" bodyfile="erbsland/conf/Error.hpp" bodystart="108" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="classerbsland_1_1conf_1_1_error_1a8ee3dd71783d7f0dea8521a502278be4" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classerbsland_1_1conf_1_1_error" kindref="compound">Error</ref></type>
        <definition>Error erbsland::conf::Error::withLocation</definition>
        <argsstring>(const Location &amp;location) const noexcept</argsstring>
        <name>withLocation</name>
        <qualifiedname>erbsland::conf::Error::withLocation</qualifiedname>
        <param>
          <type>const <ref refid="classerbsland_1_1conf_1_1_location" kindref="compound">Location</ref> &amp;</type>
          <declname>location</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a copy with the given location added or replaced.</para>
<para><simplesect kind="return"><para>A copy of this error, with the location added or replaced. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/Error.hpp" line="117" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classerbsland_1_1conf_1_1_error_1a135f1d44b8609002d09c2cfc4411eb01" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classerbsland_1_1conf_1_1_string" kindref="compound">String</ref></type>
        <definition>String erbsland::conf::Error::toText</definition>
        <argsstring>() const noexcept</argsstring>
        <name>toText</name>
        <qualifiedname>erbsland::conf::Error::toText</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert this error into a text representation.</para>
<para>This method creates a text representation of this error message that is safe to be used in logs, console-outputs, or user-interfaces. Exceedingly long paths and texts are trimmed and control characters are escaped.</para>
<para><simplesect kind="return"><para>The string representation of this error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/Error.hpp" line="128" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classerbsland_1_1conf_1_1_error_1a5b3839edc8f84f36a50befa7e0fcdc33" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * erbsland::conf::Error::what</definition>
        <argsstring>() const noexcept override</argsstring>
        <name>what</name>
        <qualifiedname>erbsland::conf::Error::what</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a null-terminated string describing the error (std::exception interface).</para>
<para><simplesect kind="return"><para>A C-string with the error message; suitable for logging or exception handling. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/Error.hpp" line="135" column="17"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="classerbsland_1_1conf_1_1_error_1a22b7251de578648f31a5c28d12376cad" prot="private" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void erbsland::conf::Error::assignOptional</definition>
        <argsstring>(const Location &amp;loc) noexcept</argsstring>
        <name>assignOptional</name>
        <qualifiedname>erbsland::conf::Error::assignOptional</qualifiedname>
        <param>
          <type>const <ref refid="classerbsland_1_1conf_1_1_location" kindref="compound">Location</ref> &amp;</type>
          <declname>loc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/Error.hpp" line="138" column="10" bodyfile="erbsland/conf/Error.hpp" bodystart="138" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="classerbsland_1_1conf_1_1_error_1ac8b4ffb987744c7b6488827b61074767" prot="private" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void erbsland::conf::Error::assignOptional</definition>
        <argsstring>(Location &amp;&amp;loc) noexcept</argsstring>
        <name>assignOptional</name>
        <qualifiedname>erbsland::conf::Error::assignOptional</qualifiedname>
        <param>
          <type><ref refid="classerbsland_1_1conf_1_1_location" kindref="compound">Location</ref> &amp;&amp;</type>
          <declname>loc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/Error.hpp" line="139" column="10" bodyfile="erbsland/conf/Error.hpp" bodystart="139" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="classerbsland_1_1conf_1_1_error_1a6629d506482ddc137b07a6fcaa9d4602" prot="private" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void erbsland::conf::Error::assignOptional</definition>
        <argsstring>(const NamePath &amp;path) noexcept</argsstring>
        <name>assignOptional</name>
        <qualifiedname>erbsland::conf::Error::assignOptional</qualifiedname>
        <param>
          <type>const <ref refid="classerbsland_1_1conf_1_1_name_path" kindref="compound">NamePath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/Error.hpp" line="140" column="10" bodyfile="erbsland/conf/Error.hpp" bodystart="140" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="classerbsland_1_1conf_1_1_error_1af6fe16a8b28665a58839bf24e6b3c347" prot="private" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void erbsland::conf::Error::assignOptional</definition>
        <argsstring>(NamePath &amp;&amp;path) noexcept</argsstring>
        <name>assignOptional</name>
        <qualifiedname>erbsland::conf::Error::assignOptional</qualifiedname>
        <param>
          <type><ref refid="classerbsland_1_1conf_1_1_name_path" kindref="compound">NamePath</ref> &amp;&amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/Error.hpp" line="141" column="10" bodyfile="erbsland/conf/Error.hpp" bodystart="141" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="classerbsland_1_1conf_1_1_error_1a9aa7b6803523c9eaf563a11893c2bc3d" prot="private" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void erbsland::conf::Error::assignOptional</definition>
        <argsstring>(const std::filesystem::path &amp;fp) noexcept</argsstring>
        <name>assignOptional</name>
        <qualifiedname>erbsland::conf::Error::assignOptional</qualifiedname>
        <param>
          <type>const std::filesystem::path &amp;</type>
          <declname>fp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/Error.hpp" line="142" column="10" bodyfile="erbsland/conf/Error.hpp" bodystart="142" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="classerbsland_1_1conf_1_1_error_1aca1ff90fd2e4aeedaf89a224a4117eee" prot="private" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void erbsland::conf::Error::assignOptional</definition>
        <argsstring>(std::filesystem::path &amp;&amp;fp) noexcept</argsstring>
        <name>assignOptional</name>
        <qualifiedname>erbsland::conf::Error::assignOptional</qualifiedname>
        <param>
          <type>std::filesystem::path &amp;&amp;</type>
          <declname>fp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/Error.hpp" line="143" column="10" bodyfile="erbsland/conf/Error.hpp" bodystart="143" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="classerbsland_1_1conf_1_1_error_1a161c2957bfcf0a5df3076952ba606014" prot="private" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void erbsland::conf::Error::assignOptional</definition>
        <argsstring>(const std::error_code &amp;ec) noexcept</argsstring>
        <name>assignOptional</name>
        <qualifiedname>erbsland::conf::Error::assignOptional</qualifiedname>
        <param>
          <type>const std::error_code &amp;</type>
          <declname>ec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/Error.hpp" line="144" column="10" bodyfile="erbsland/conf/Error.hpp" bodystart="144" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="classerbsland_1_1conf_1_1_error_1a79997c56b65e7ce8a153cb84998111dd" prot="private" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void erbsland::conf::Error::assignOptional</definition>
        <argsstring>(std::error_code &amp;&amp;ec) noexcept</argsstring>
        <name>assignOptional</name>
        <qualifiedname>erbsland::conf::Error::assignOptional</qualifiedname>
        <param>
          <type>std::error_code &amp;&amp;</type>
          <declname>ec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/Error.hpp" line="145" column="10" bodyfile="erbsland/conf/Error.hpp" bodystart="145" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="classerbsland_1_1conf_1_1_error_1a00f0788b716dcbe75287e70ec81d8daf" prot="private" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void erbsland::conf::Error::updateWhatBuffer</definition>
        <argsstring>() const noexcept</argsstring>
        <name>updateWhatBuffer</name>
        <qualifiedname>erbsland::conf::Error::updateWhatBuffer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/Error.hpp" line="146" column="10"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>The exception for all errors.</para>
<para><simplesect kind="par"><title>Tested:</title><para><computeroutput>ErrorTest</computeroutput> </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>erbsland::conf::Error</label>
        <link refid="classerbsland_1_1conf_1_1_error"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>std::exception</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>erbsland::conf::Error</label>
        <link refid="classerbsland_1_1conf_1_1_error"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>std::exception</label>
      </node>
    </collaborationgraph>
    <location file="erbsland/conf/Error.hpp" line="23" column="1" bodyfile="erbsland/conf/Error.hpp" bodystart="23" bodyend="156"/>
    <listofallmembers>
      <member refid="classerbsland_1_1conf_1_1_error_1a439837b7254b178d6b7207da044adb64" prot="private" virt="non-virtual"><scope>erbsland::conf::Error</scope><name>_category</name></member>
      <member refid="classerbsland_1_1conf_1_1_error_1aa2d27bd3a40e0ad4ebade1d80cd629a1" prot="private" virt="non-virtual"><scope>erbsland::conf::Error</scope><name>_errorCode</name></member>
      <member refid="classerbsland_1_1conf_1_1_error_1a466b35c2cb1c3496f7182088620aceb9" prot="private" virt="non-virtual"><scope>erbsland::conf::Error</scope><name>_filePath</name></member>
      <member refid="classerbsland_1_1conf_1_1_error_1a6c2da1b98bf5e1f8dc15013fa5e6f89d" prot="private" virt="non-virtual"><scope>erbsland::conf::Error</scope><name>_location</name></member>
      <member refid="classerbsland_1_1conf_1_1_error_1a1daab01999a888885e1e6cf39b46ad13" prot="private" virt="non-virtual"><scope>erbsland::conf::Error</scope><name>_message</name></member>
      <member refid="classerbsland_1_1conf_1_1_error_1a8ac24a787c01f238eac884a881338ebb" prot="private" virt="non-virtual"><scope>erbsland::conf::Error</scope><name>_namePath</name></member>
      <member refid="classerbsland_1_1conf_1_1_error_1a85a93cd65f4a677d769d629e50dbfe53" prot="private" virt="non-virtual"><scope>erbsland::conf::Error</scope><name>_whatBuffer</name></member>
      <member refid="classerbsland_1_1conf_1_1_error_1a22b7251de578648f31a5c28d12376cad" prot="private" virt="non-virtual"><scope>erbsland::conf::Error</scope><name>assignOptional</name></member>
      <member refid="classerbsland_1_1conf_1_1_error_1ac8b4ffb987744c7b6488827b61074767" prot="private" virt="non-virtual"><scope>erbsland::conf::Error</scope><name>assignOptional</name></member>
      <member refid="classerbsland_1_1conf_1_1_error_1a6629d506482ddc137b07a6fcaa9d4602" prot="private" virt="non-virtual"><scope>erbsland::conf::Error</scope><name>assignOptional</name></member>
      <member refid="classerbsland_1_1conf_1_1_error_1af6fe16a8b28665a58839bf24e6b3c347" prot="private" virt="non-virtual"><scope>erbsland::conf::Error</scope><name>assignOptional</name></member>
      <member refid="classerbsland_1_1conf_1_1_error_1a9aa7b6803523c9eaf563a11893c2bc3d" prot="private" virt="non-virtual"><scope>erbsland::conf::Error</scope><name>assignOptional</name></member>
      <member refid="classerbsland_1_1conf_1_1_error_1aca1ff90fd2e4aeedaf89a224a4117eee" prot="private" virt="non-virtual"><scope>erbsland::conf::Error</scope><name>assignOptional</name></member>
      <member refid="classerbsland_1_1conf_1_1_error_1a161c2957bfcf0a5df3076952ba606014" prot="private" virt="non-virtual"><scope>erbsland::conf::Error</scope><name>assignOptional</name></member>
      <member refid="classerbsland_1_1conf_1_1_error_1a79997c56b65e7ce8a153cb84998111dd" prot="private" virt="non-virtual"><scope>erbsland::conf::Error</scope><name>assignOptional</name></member>
      <member refid="classerbsland_1_1conf_1_1_error_1a8d0eb1492021e62b248e23dade22845f" prot="public" virt="non-virtual"><scope>erbsland::conf::Error</scope><name>category</name></member>
      <member refid="classerbsland_1_1conf_1_1_error_1ae7e5520c64642c0c739141da27040f9a" prot="public" virt="non-virtual"><scope>erbsland::conf::Error</scope><name>Error</name></member>
      <member refid="classerbsland_1_1conf_1_1_error_1a2fd722a56fefb67858e2f56be38ca844" prot="public" virt="non-virtual"><scope>erbsland::conf::Error</scope><name>Error</name></member>
      <member refid="classerbsland_1_1conf_1_1_error_1a161bb2ac9b20f59bf2dbb4366f2e5144" prot="public" virt="non-virtual"><scope>erbsland::conf::Error</scope><name>Error</name></member>
      <member refid="classerbsland_1_1conf_1_1_error_1a654ce86214a8278a00e79727800c020b" prot="public" virt="non-virtual"><scope>erbsland::conf::Error</scope><name>Error</name></member>
      <member refid="classerbsland_1_1conf_1_1_error_1a3852a8152eeacb96dcd755053b578555" prot="public" virt="non-virtual"><scope>erbsland::conf::Error</scope><name>errorCode</name></member>
      <member refid="classerbsland_1_1conf_1_1_error_1a94bafd56dc0ae26523c349adf6e7e74b" prot="public" virt="non-virtual"><scope>erbsland::conf::Error</scope><name>filePath</name></member>
      <member refid="classerbsland_1_1conf_1_1_error_1a2b05d540de23acbedf20c47813c40e37" prot="public" virt="non-virtual"><scope>erbsland::conf::Error</scope><name>location</name></member>
      <member refid="classerbsland_1_1conf_1_1_error_1ab206982f6a258b3a124d1c4c4adb0c04" prot="public" virt="non-virtual"><scope>erbsland::conf::Error</scope><name>message</name></member>
      <member refid="classerbsland_1_1conf_1_1_error_1addfdbb838a8e00abffa5170f7f2acd8b" prot="public" virt="non-virtual"><scope>erbsland::conf::Error</scope><name>namePath</name></member>
      <member refid="classerbsland_1_1conf_1_1_error_1a2e82fb93a505feac93de102f04fca38f" prot="public" virt="non-virtual"><scope>erbsland::conf::Error</scope><name>operator=</name></member>
      <member refid="classerbsland_1_1conf_1_1_error_1add620b43205127e3b7ac44c7add698fe" prot="public" virt="non-virtual"><scope>erbsland::conf::Error</scope><name>operator=</name></member>
      <member refid="classerbsland_1_1conf_1_1_error_1a135f1d44b8609002d09c2cfc4411eb01" prot="public" virt="non-virtual"><scope>erbsland::conf::Error</scope><name>toText</name></member>
      <member refid="classerbsland_1_1conf_1_1_error_1a00f0788b716dcbe75287e70ec81d8daf" prot="private" virt="non-virtual"><scope>erbsland::conf::Error</scope><name>updateWhatBuffer</name></member>
      <member refid="classerbsland_1_1conf_1_1_error_1a5b3839edc8f84f36a50befa7e0fcdc33" prot="public" virt="non-virtual"><scope>erbsland::conf::Error</scope><name>what</name></member>
      <member refid="classerbsland_1_1conf_1_1_error_1a8ee3dd71783d7f0dea8521a502278be4" prot="public" virt="non-virtual"><scope>erbsland::conf::Error</scope><name>withLocation</name></member>
      <member refid="classerbsland_1_1conf_1_1_error_1a084913126a29f591709952ca7c7d9dc6" prot="public" virt="non-virtual"><scope>erbsland::conf::Error</scope><name>~Error</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
