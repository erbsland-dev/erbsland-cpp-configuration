<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classerbsland_1_1conf_1_1_time" kind="class" language="C++" prot="public" final="yes">
    <compoundname>erbsland::conf::Time</compoundname>
    <includes refid="_time_8hpp" local="no">erbsland/conf/Time.hpp</includes>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="classerbsland_1_1conf_1_1_time_1ae3d4a8787eced68c65a23f5906c11add" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class DateTime</definition>
        <argsstring></argsstring>
        <name>DateTime</name>
        <qualifiedname>erbsland::conf::Time::DateTime</qualifiedname>
        <param>
          <type><ref refid="classerbsland_1_1conf_1_1_date_time" kindref="compound">DateTime</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/Time.hpp" line="31" column="18" bodyfile="erbsland/conf/Time.hpp" bodystart="31" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classerbsland_1_1conf_1_1_time_1ad81e320d98bb042b77584c51db67c90a" prot="private" static="no" mutable="no">
        <type>std::chrono::nanoseconds</type>
        <definition>std::chrono::nanoseconds erbsland::conf::Time::_nanoseconds</definition>
        <argsstring></argsstring>
        <name>_nanoseconds</name>
        <qualifiedname>erbsland::conf::Time::_nanoseconds</qualifiedname>
        <initializer>{-1}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/Time.hpp" line="122" column="30" bodyfile="erbsland/conf/Time.hpp" bodystart="122" bodyend="122"/>
      </memberdef>
      <memberdef kind="variable" id="classerbsland_1_1conf_1_1_time_1a465077db11d0ad8cc0a75b68a01b1f8d" prot="private" static="no" mutable="no">
        <type><ref refid="classerbsland_1_1conf_1_1_time_offset" kindref="compound">TimeOffset</ref></type>
        <definition>TimeOffset erbsland::conf::Time::_offset</definition>
        <argsstring></argsstring>
        <name>_offset</name>
        <qualifiedname>erbsland::conf::Time::_offset</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/Time.hpp" line="123" column="16" bodyfile="erbsland/conf/Time.hpp" bodystart="123" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classerbsland_1_1conf_1_1_time_1ab9c2e9a83a27e8184bebabfaef9f4dab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>erbsland::conf::Time::Time</definition>
        <argsstring>()=default</argsstring>
        <name>Time</name>
        <qualifiedname>erbsland::conf::Time::Time</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create an undefined time. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/Time.hpp" line="36" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classerbsland_1_1conf_1_1_time_1a46d71207461e524cb3bbbf56f6449a1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>erbsland::conf::Time::Time</definition>
        <argsstring>(int hour, int minute, int second, int nanosecond, TimeOffset offset)</argsstring>
        <name>Time</name>
        <qualifiedname>erbsland::conf::Time::Time</qualifiedname>
        <param>
          <type>int</type>
          <declname>hour</declname>
        </param>
        <param>
          <type>int</type>
          <declname>minute</declname>
        </param>
        <param>
          <type>int</type>
          <declname>second</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nanosecond</declname>
        </param>
        <param>
          <type><ref refid="classerbsland_1_1conf_1_1_time_offset" kindref="compound">TimeOffset</ref></type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a new time from the given elements.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hour</parametername>
</parameternamelist>
<parameterdescription>
<para>The hour in the range 0-23. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>minute</parametername>
</parameternamelist>
<parameterdescription>
<para>The minute in the range 0-59. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>second</parametername>
</parameternamelist>
<parameterdescription>
<para>The second in the range 0-59. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nanosecond</parametername>
</parameternamelist>
<parameterdescription>
<para>The second fraction in the range 0-999&apos;999&apos;999 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>The time offset. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>if any of the parameters is out of the valid range. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/Time.hpp" line="47" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classerbsland_1_1conf_1_1_time_1aa6c73a9e5ae2b356933a18a4d2734bec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>erbsland::conf::Time::Time</definition>
        <argsstring>(int64_t nanoseconds, TimeOffset offset)</argsstring>
        <name>Time</name>
        <qualifiedname>erbsland::conf::Time::Time</qualifiedname>
        <param>
          <type>int64_t</type>
          <declname>nanoseconds</declname>
        </param>
        <param>
          <type><ref refid="classerbsland_1_1conf_1_1_time_offset" kindref="compound">TimeOffset</ref></type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a time from nanoseconds.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nanoseconds</parametername>
</parameternamelist>
<parameterdescription>
<para>The time in nanoseconds since midnight in the range 0-5&apos;183&apos;999&apos;999&apos;999&apos;999. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>The time offset. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>in case the nanoseconds exceed 24h or is negative. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/Time.hpp" line="55" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classerbsland_1_1conf_1_1_time_1a81c4a7f28b47bf96207deff9204e2c2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>erbsland::conf::Time::~Time</definition>
        <argsstring>()=default</argsstring>
        <name>~Time</name>
        <qualifiedname>erbsland::conf::Time::~Time</qualifiedname>
        <briefdescription>
<para>Default destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/Time.hpp" line="58" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classerbsland_1_1conf_1_1_time_1a2471aa8ba133531cb3b185bf13b77fab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>erbsland::conf::Time::Time</definition>
        <argsstring>(const Time &amp;)=default</argsstring>
        <name>Time</name>
        <qualifiedname>erbsland::conf::Time::Time</qualifiedname>
        <param>
          <type>const <ref refid="classerbsland_1_1conf_1_1_time" kindref="compound">Time</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Default copy constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/Time.hpp" line="60" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classerbsland_1_1conf_1_1_time_1ab1b89519446658d70abff151cff4b5de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classerbsland_1_1conf_1_1_time" kindref="compound">Time</ref> &amp;</type>
        <definition>Time &amp; erbsland::conf::Time::operator=</definition>
        <argsstring>(const Time &amp;)=default</argsstring>
        <name>operator=</name>
        <qualifiedname>erbsland::conf::Time::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classerbsland_1_1conf_1_1_time" kindref="compound">Time</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Default copy assignment. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/Time.hpp" line="62" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classerbsland_1_1conf_1_1_time_1a8258ccdaa75897904111ff2438c56120" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool erbsland::conf::Time::isUndefined</definition>
        <argsstring>() const noexcept</argsstring>
        <name>isUndefined</name>
        <qualifiedname>erbsland::conf::Time::isUndefined</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Test if this time is undefined (created with the default constructor).</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if this time is undefined. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/Time.hpp" line="72" column="11" bodyfile="erbsland/conf/Time.hpp" bodystart="72" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classerbsland_1_1conf_1_1_time_1a172705824c40275b5ea52df3c9a4acfc" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>int</type>
        <definition>int erbsland::conf::Time::hour</definition>
        <argsstring>() const noexcept</argsstring>
        <name>hour</name>
        <qualifiedname>erbsland::conf::Time::hour</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The hour part of this time (0-23). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/Time.hpp" line="78" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classerbsland_1_1conf_1_1_time_1a33655c7c9d4df9caef98acfd75d64527" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>int</type>
        <definition>int erbsland::conf::Time::minute</definition>
        <argsstring>() const noexcept</argsstring>
        <name>minute</name>
        <qualifiedname>erbsland::conf::Time::minute</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The minute part of this time (0-59). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/Time.hpp" line="82" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classerbsland_1_1conf_1_1_time_1ae613245caf3e889c4b25146a32481cbb" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>int</type>
        <definition>int erbsland::conf::Time::second</definition>
        <argsstring>() const noexcept</argsstring>
        <name>second</name>
        <qualifiedname>erbsland::conf::Time::second</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The second part of this time (0-59). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/Time.hpp" line="86" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classerbsland_1_1conf_1_1_time_1ae55052687c9d0b1a709b6087710d5d94" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>std::chrono::nanoseconds</type>
        <definition>std::chrono::nanoseconds erbsland::conf::Time::secondFraction</definition>
        <argsstring>() const noexcept</argsstring>
        <name>secondFraction</name>
        <qualifiedname>erbsland::conf::Time::secondFraction</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The second fractions in nanoseconds (0-999&apos;999&apos;999) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/Time.hpp" line="90" column="31"/>
      </memberdef>
      <memberdef kind="function" id="classerbsland_1_1conf_1_1_time_1ab9b35082f89efd48d632c657f8f896b3" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classerbsland_1_1conf_1_1_time_offset" kindref="compound">TimeOffset</ref> &amp;</type>
        <definition>const TimeOffset &amp; erbsland::conf::Time::offset</definition>
        <argsstring>() const noexcept</argsstring>
        <name>offset</name>
        <qualifiedname>erbsland::conf::Time::offset</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The offset for this time. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/Time.hpp" line="94" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classerbsland_1_1conf_1_1_time_1a09d5db9e991b612714a0e326bfc2ac16" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>std::chrono::nanoseconds</type>
        <definition>std::chrono::nanoseconds erbsland::conf::Time::toNanoseconds</definition>
        <argsstring>() const noexcept</argsstring>
        <name>toNanoseconds</name>
        <qualifiedname>erbsland::conf::Time::toNanoseconds</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert this time into nanoseconds since midnight. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/Time.hpp" line="99" column="31"/>
      </memberdef>
      <memberdef kind="function" id="classerbsland_1_1conf_1_1_time_1ae23ca10ea95753a5c07f47801496415c" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classerbsland_1_1conf_1_1_string" kindref="compound">String</ref></type>
        <definition>String erbsland::conf::Time::toText</definition>
        <argsstring>() const noexcept</argsstring>
        <name>toText</name>
        <qualifiedname>erbsland::conf::Time::toText</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert this time into text.</para>
<para>Uses the ISO format hh:mm:ss.zzz. Adds the minimum number of second fractions. Always adds the offset or &quot;z&quot; for UTC times, unless this is a local time.</para>
<para><simplesect kind="return"><para>The formatted time or an empty string for undefined times. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/Time.hpp" line="108" column="13"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classerbsland_1_1conf_1_1_time_1a17a30cbaf750c0a70372149bd892e227" prot="private" static="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>int64_t</type>
        <definition>static int64_t erbsland::conf::Time::nanosecondsFromTime</definition>
        <argsstring>(int hour, int minute, int second, int nanosecond) noexcept</argsstring>
        <name>nanosecondsFromTime</name>
        <qualifiedname>erbsland::conf::Time::nanosecondsFromTime</qualifiedname>
        <param>
          <type>int</type>
          <declname>hour</declname>
        </param>
        <param>
          <type>int</type>
          <declname>minute</declname>
        </param>
        <param>
          <type>int</type>
          <declname>second</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nanosecond</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate the number of nanoseconds since midnight from the given time elements. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/Time.hpp" line="113" column="20"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="classerbsland_1_1conf_1_1_time_1adbbe239490fe2a5ebeb6439afb08c4c5" prot="private" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::chrono::nanoseconds</type>
        <definition>std::chrono::nanoseconds erbsland::conf::Time::nanosecondsForComparison</definition>
        <argsstring>() const noexcept</argsstring>
        <name>nanosecondsForComparison</name>
        <qualifiedname>erbsland::conf::Time::nanosecondsForComparison</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert the nanoseconds for comparison. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/Time.hpp" line="117" column="31" bodyfile="erbsland/conf/Time.hpp" bodystart="117" bodyend="119"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>A time value with nanosecond precision and optional offset.</para>
<para><simplesect kind="note"><para>About the implementation of the comparison operators: Comparison of two times, without date and/or mixed offsets is very limited and usually makes no sense, as for a proper comparison of a point-in-time the date for the given time is required as well. Therefore, as this time class is a minimal data class, for time-comparison, local-time is assumed to be UTC.</para>
</simplesect>
<simplesect kind="par"><title>Tested:</title><para><computeroutput>TimeTest</computeroutput> </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="erbsland/conf/Time.hpp" line="30" column="1" bodyfile="erbsland/conf/Time.hpp" bodystart="30" bodyend="124"/>
    <listofallmembers>
      <member refid="classerbsland_1_1conf_1_1_time_1ad81e320d98bb042b77584c51db67c90a" prot="private" virt="non-virtual"><scope>erbsland::conf::Time</scope><name>_nanoseconds</name></member>
      <member refid="classerbsland_1_1conf_1_1_time_1a465077db11d0ad8cc0a75b68a01b1f8d" prot="private" virt="non-virtual"><scope>erbsland::conf::Time</scope><name>_offset</name></member>
      <member refid="classerbsland_1_1conf_1_1_time_1ae3d4a8787eced68c65a23f5906c11add" prot="private" virt="non-virtual"><scope>erbsland::conf::Time</scope><name>DateTime</name></member>
      <member refid="classerbsland_1_1conf_1_1_time_1a172705824c40275b5ea52df3c9a4acfc" prot="public" virt="non-virtual"><scope>erbsland::conf::Time</scope><name>hour</name></member>
      <member refid="classerbsland_1_1conf_1_1_time_1a8258ccdaa75897904111ff2438c56120" prot="public" virt="non-virtual"><scope>erbsland::conf::Time</scope><name>isUndefined</name></member>
      <member refid="classerbsland_1_1conf_1_1_time_1a33655c7c9d4df9caef98acfd75d64527" prot="public" virt="non-virtual"><scope>erbsland::conf::Time</scope><name>minute</name></member>
      <member refid="classerbsland_1_1conf_1_1_time_1adbbe239490fe2a5ebeb6439afb08c4c5" prot="private" virt="non-virtual"><scope>erbsland::conf::Time</scope><name>nanosecondsForComparison</name></member>
      <member refid="classerbsland_1_1conf_1_1_time_1a17a30cbaf750c0a70372149bd892e227" prot="private" virt="non-virtual"><scope>erbsland::conf::Time</scope><name>nanosecondsFromTime</name></member>
      <member refid="classerbsland_1_1conf_1_1_time_1ab9b35082f89efd48d632c657f8f896b3" prot="public" virt="non-virtual"><scope>erbsland::conf::Time</scope><name>offset</name></member>
      <member refid="classerbsland_1_1conf_1_1_time_1ab1b89519446658d70abff151cff4b5de" prot="public" virt="non-virtual"><scope>erbsland::conf::Time</scope><name>operator=</name></member>
      <member refid="classerbsland_1_1conf_1_1_time_1ae613245caf3e889c4b25146a32481cbb" prot="public" virt="non-virtual"><scope>erbsland::conf::Time</scope><name>second</name></member>
      <member refid="classerbsland_1_1conf_1_1_time_1ae55052687c9d0b1a709b6087710d5d94" prot="public" virt="non-virtual"><scope>erbsland::conf::Time</scope><name>secondFraction</name></member>
      <member refid="classerbsland_1_1conf_1_1_time_1ab9c2e9a83a27e8184bebabfaef9f4dab" prot="public" virt="non-virtual"><scope>erbsland::conf::Time</scope><name>Time</name></member>
      <member refid="classerbsland_1_1conf_1_1_time_1a46d71207461e524cb3bbbf56f6449a1b" prot="public" virt="non-virtual"><scope>erbsland::conf::Time</scope><name>Time</name></member>
      <member refid="classerbsland_1_1conf_1_1_time_1aa6c73a9e5ae2b356933a18a4d2734bec" prot="public" virt="non-virtual"><scope>erbsland::conf::Time</scope><name>Time</name></member>
      <member refid="classerbsland_1_1conf_1_1_time_1a2471aa8ba133531cb3b185bf13b77fab" prot="public" virt="non-virtual"><scope>erbsland::conf::Time</scope><name>Time</name></member>
      <member refid="classerbsland_1_1conf_1_1_time_1a09d5db9e991b612714a0e326bfc2ac16" prot="public" virt="non-virtual"><scope>erbsland::conf::Time</scope><name>toNanoseconds</name></member>
      <member refid="classerbsland_1_1conf_1_1_time_1ae23ca10ea95753a5c07f47801496415c" prot="public" virt="non-virtual"><scope>erbsland::conf::Time</scope><name>toText</name></member>
      <member refid="classerbsland_1_1conf_1_1_time_1a81c4a7f28b47bf96207deff9204e2c2d" prot="public" virt="non-virtual"><scope>erbsland::conf::Time</scope><name>~Time</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
