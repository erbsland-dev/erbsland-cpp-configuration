<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classerbsland_1_1conf_1_1_source" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>erbsland::conf::Source</compoundname>
    <includes refid="_source_8hpp" local="no">erbsland/conf/Source.hpp</includes>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classerbsland_1_1conf_1_1_source_1a7fc683f19529747ad94725e9d3210e0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual erbsland::conf::Source::~Source</definition>
        <argsstring>()=default</argsstring>
        <name>~Source</name>
        <qualifiedname>erbsland::conf::Source::~Source</qualifiedname>
        <briefdescription>
<para>Default destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/Source.hpp" line="44" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classerbsland_1_1conf_1_1_source_1a8f61d924b10bcab25f54061df54495ea" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classerbsland_1_1conf_1_1_string" kindref="compound">String</ref> &amp;</type>
        <definition>const String &amp; erbsland::conf::Source::name</definition>
        <argsstring>() const noexcept</argsstring>
        <name>name</name>
        <qualifiedname>erbsland::conf::Source::name</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the name of the source.</para>
<para>The name of the source also specifies its type or protocol. In a source identifier, the source name is separated from the source path by a colon.</para>
<para><simplesect kind="return"><para>The name of the source. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/Source.hpp" line="54" column="19" bodyfile="erbsland/conf/Source.hpp" bodystart="54" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="classerbsland_1_1conf_1_1_source_1a3aac4b9a2502b96be7ef4f8e41b3ca15" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classerbsland_1_1conf_1_1_string" kindref="compound">String</ref> &amp;</type>
        <definition>const String &amp; erbsland::conf::Source::path</definition>
        <argsstring>() const noexcept</argsstring>
        <name>path</name>
        <qualifiedname>erbsland::conf::Source::path</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the path of the source.</para>
<para>The path of the source specifies the location of the source. In a source identifier, the source path is separated from the source name by a colon.</para>
<para><simplesect kind="return"><para>The path of the source. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/Source.hpp" line="65" column="19" bodyfile="erbsland/conf/Source.hpp" bodystart="65" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="classerbsland_1_1conf_1_1_source_1a8971cde922daa8bbeedba12abc33bd7c" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="pure-virtual">
        <type>SourceIdentifierPtr</type>
        <definition>virtual SourceIdentifierPtr erbsland::conf::Source::identifier</definition>
        <argsstring>() const noexcept=0</argsstring>
        <name>identifier</name>
        <qualifiedname>erbsland::conf::Source::identifier</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the source identifier.</para>
<para><simplesect kind="return"><para>The source identifier. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/Source.hpp" line="73" column="34"/>
      </memberdef>
      <memberdef kind="function" id="classerbsland_1_1conf_1_1_source_1a24bd9655484da160a4efde2c2dc3bed9" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void erbsland::conf::Source::open</definition>
        <argsstring>()=0</argsstring>
        <name>open</name>
        <qualifiedname>erbsland::conf::Source::open</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Open the source.</para>
<para>The open method is only called <bold>once</bold> in the lifetime of a source. After a successful call of <computeroutput><ref refid="classerbsland_1_1conf_1_1_source_1a24bd9655484da160a4efde2c2dc3bed9" kindref="member">open()</ref></computeroutput>, the method <computeroutput><ref refid="classerbsland_1_1conf_1_1_source_1a10714a9c072189850b1b90aa75f7f41d" kindref="member">isOpen()</ref></computeroutput> must return <computeroutput>true</computeroutput>.</para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classerbsland_1_1conf_1_1_error" kindref="compound">Error</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>(IO) If an error occurs while opening the source. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/Source.hpp" line="83" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classerbsland_1_1conf_1_1_source_1a10714a9c072189850b1b90aa75f7f41d" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool erbsland::conf::Source::isOpen</definition>
        <argsstring>() const noexcept=0</argsstring>
        <name>isOpen</name>
        <qualifiedname>erbsland::conf::Source::isOpen</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Test if the source is open.</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the source is open, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/Source.hpp" line="89" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classerbsland_1_1conf_1_1_source_1a5c7812c38ca75c57a5eb011edf87e7df" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool erbsland::conf::Source::atEnd</definition>
        <argsstring>() const noexcept=0</argsstring>
        <name>atEnd</name>
        <qualifiedname>erbsland::conf::Source::atEnd</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Test if the source reached its end.</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the source reached its end, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/Source.hpp" line="95" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classerbsland_1_1conf_1_1_source_1a4c2bb920217a2301041fd829a7f7c6ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>std::size_t</type>
        <definition>virtual std::size_t erbsland::conf::Source::readLine</definition>
        <argsstring>(std::span&lt; std::byte &gt; lineBuffer)=0</argsstring>
        <name>readLine</name>
        <qualifiedname>erbsland::conf::Source::readLine</qualifiedname>
        <param>
          <type>std::span&lt; std::byte &gt;</type>
          <declname>lineBuffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reads a line from the source.</para>
<para>The read line must contain the ending newline sequence if there is any.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lineBuffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer to store the read line. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of bytes read, or zero if no more data was available (e.g. when the file situation changed since the last end-of-file check.)</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classerbsland_1_1conf_1_1_error" kindref="compound">Error</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>(IO) If an error occurs while reading the line. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/Source.hpp" line="107" column="26"/>
      </memberdef>
      <memberdef kind="function" id="classerbsland_1_1conf_1_1_source_1ad8b8bdb3d52cd5134c7ebe4ac00d57d0" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void erbsland::conf::Source::close</definition>
        <argsstring>() noexcept=0</argsstring>
        <name>close</name>
        <qualifiedname>erbsland::conf::Source::close</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Closes the source.</para>
<para>Closes the source and releases any system resources associated with the source. After a call of <computeroutput><ref refid="classerbsland_1_1conf_1_1_source_1ad8b8bdb3d52cd5134c7ebe4ac00d57d0" kindref="member">close()</ref></computeroutput>, the method <computeroutput><ref refid="classerbsland_1_1conf_1_1_source_1a10714a9c072189850b1b90aa75f7f41d" kindref="member">isOpen()</ref></computeroutput> must return <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/Source.hpp" line="114" column="18"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classerbsland_1_1conf_1_1_source_1a21bfd10aa0c7c145cd60684e34fe8bae" prot="public" static="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>SourcePtr</type>
        <definition>static SourcePtr erbsland::conf::Source::fromFile</definition>
        <argsstring>(const String &amp;path) noexcept</argsstring>
        <name>fromFile</name>
        <qualifiedname>erbsland::conf::Source::fromFile</qualifiedname>
        <param>
          <type>const <ref refid="classerbsland_1_1conf_1_1_string" kindref="compound">String</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a source for a file path.</para>
<para>The returned source does not open the file immediately. The file is opened on the first call to <computeroutput><ref refid="classerbsland_1_1conf_1_1_source_1a24bd9655484da160a4efde2c2dc3bed9" kindref="member">open()</ref></computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>The path to the file. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/Source.hpp" line="124" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classerbsland_1_1conf_1_1_source_1ac56c44f456d395e39e1ddbbbba961e59" prot="public" static="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>SourcePtr</type>
        <definition>static SourcePtr erbsland::conf::Source::fromFile</definition>
        <argsstring>(const std::filesystem::path &amp;path) noexcept</argsstring>
        <name>fromFile</name>
        <qualifiedname>erbsland::conf::Source::fromFile</qualifiedname>
        <param>
          <type>const std::filesystem::path &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a source for a file path.</para>
<para>The returned source does not open the file immediately. The file is opened on the first call to <computeroutput><ref refid="classerbsland_1_1conf_1_1_source_1a24bd9655484da160a4efde2c2dc3bed9" kindref="member">open()</ref></computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>The path to the file.   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/Source.hpp" line="126" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classerbsland_1_1conf_1_1_source_1abf19ee7d31828248d716975143275c2d" prot="public" static="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>SourcePtr</type>
        <definition>static SourcePtr erbsland::conf::Source::fromString</definition>
        <argsstring>(const String &amp;text) noexcept</argsstring>
        <name>fromString</name>
        <qualifiedname>erbsland::conf::Source::fromString</qualifiedname>
        <param>
          <type>const <ref refid="classerbsland_1_1conf_1_1_string" kindref="compound">String</ref> &amp;</type>
          <declname>text</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a source from the given UTF-8 encoded string.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>text</parametername>
</parameternamelist>
<parameterdescription>
<para>The string with the text. A copy of the string is stored in the source. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/Source.hpp" line="132" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classerbsland_1_1conf_1_1_source_1ad666fb92326053070999bc82299983ec" prot="public" static="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>SourcePtr</type>
        <definition>static SourcePtr erbsland::conf::Source::fromString</definition>
        <argsstring>(std::string &amp;&amp;text) noexcept</argsstring>
        <name>fromString</name>
        <qualifiedname>erbsland::conf::Source::fromString</qualifiedname>
        <param>
          <type>std::string &amp;&amp;</type>
          <declname>text</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a source from the given UTF-8 encoded string.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>text</parametername>
</parameternamelist>
<parameterdescription>
<para>The string with the text. A copy of the string is stored in the source.   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/Source.hpp" line="134" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classerbsland_1_1conf_1_1_source_1aedc76bd754086d29e1e1c67f151bc757" prot="public" static="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>SourcePtr</type>
        <definition>static SourcePtr erbsland::conf::Source::fromString</definition>
        <argsstring>(const std::string &amp;text) noexcept</argsstring>
        <name>fromString</name>
        <qualifiedname>erbsland::conf::Source::fromString</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>text</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a source from the given UTF-8 encoded string.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>text</parametername>
</parameternamelist>
<parameterdescription>
<para>The string with the text. A copy of the string is stored in the source.   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="erbsland/conf/Source.hpp" line="136" column="23"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Interface for the data source to read the configuration.</para>
<para>Implementation notes:</para>
<para><itemizedlist>
<listitem><para>Constructing instances of source subclasses should be a lightweight operation, as sources may be created in batches, e.g. when an <computeroutput>\@include</computeroutput> directive with a recursive pattern is encountered.</para>
</listitem><listitem><para>The constructor of a source shouldn&apos;t throw exceptions, unless a program termination due to internal errors is favourable.</para>
</listitem><listitem><para>Heavy allocations and API calls shall be made in the <computeroutput><ref refid="classerbsland_1_1conf_1_1_source_1a24bd9655484da160a4efde2c2dc3bed9" kindref="member">open()</ref></computeroutput> method.</para>
</listitem><listitem><para>Any IO exceptions shall be raised in the <computeroutput><ref refid="classerbsland_1_1conf_1_1_source_1a24bd9655484da160a4efde2c2dc3bed9" kindref="member">open()</ref></computeroutput> and/or <computeroutput><ref refid="classerbsland_1_1conf_1_1_source_1a4c2bb920217a2301041fd829a7f7c6ed" kindref="member">readLine()</ref></computeroutput> methods.</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="par"><title>Tested:</title><para><computeroutput>SourceCreateTest</computeroutput> </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="erbsland/conf/Source.hpp" line="41" column="1" bodyfile="erbsland/conf/Source.hpp" bodystart="41" bodyend="142"/>
    <listofallmembers>
      <member refid="classerbsland_1_1conf_1_1_source_1a5c7812c38ca75c57a5eb011edf87e7df" prot="public" virt="pure-virtual"><scope>erbsland::conf::Source</scope><name>atEnd</name></member>
      <member refid="classerbsland_1_1conf_1_1_source_1ad8b8bdb3d52cd5134c7ebe4ac00d57d0" prot="public" virt="pure-virtual"><scope>erbsland::conf::Source</scope><name>close</name></member>
      <member refid="classerbsland_1_1conf_1_1_source_1a21bfd10aa0c7c145cd60684e34fe8bae" prot="public" virt="non-virtual"><scope>erbsland::conf::Source</scope><name>fromFile</name></member>
      <member refid="classerbsland_1_1conf_1_1_source_1ac56c44f456d395e39e1ddbbbba961e59" prot="public" virt="non-virtual"><scope>erbsland::conf::Source</scope><name>fromFile</name></member>
      <member refid="classerbsland_1_1conf_1_1_source_1abf19ee7d31828248d716975143275c2d" prot="public" virt="non-virtual"><scope>erbsland::conf::Source</scope><name>fromString</name></member>
      <member refid="classerbsland_1_1conf_1_1_source_1ad666fb92326053070999bc82299983ec" prot="public" virt="non-virtual"><scope>erbsland::conf::Source</scope><name>fromString</name></member>
      <member refid="classerbsland_1_1conf_1_1_source_1aedc76bd754086d29e1e1c67f151bc757" prot="public" virt="non-virtual"><scope>erbsland::conf::Source</scope><name>fromString</name></member>
      <member refid="classerbsland_1_1conf_1_1_source_1a8971cde922daa8bbeedba12abc33bd7c" prot="public" virt="pure-virtual"><scope>erbsland::conf::Source</scope><name>identifier</name></member>
      <member refid="classerbsland_1_1conf_1_1_source_1a10714a9c072189850b1b90aa75f7f41d" prot="public" virt="pure-virtual"><scope>erbsland::conf::Source</scope><name>isOpen</name></member>
      <member refid="classerbsland_1_1conf_1_1_source_1a8f61d924b10bcab25f54061df54495ea" prot="public" virt="non-virtual"><scope>erbsland::conf::Source</scope><name>name</name></member>
      <member refid="classerbsland_1_1conf_1_1_source_1a24bd9655484da160a4efde2c2dc3bed9" prot="public" virt="pure-virtual"><scope>erbsland::conf::Source</scope><name>open</name></member>
      <member refid="classerbsland_1_1conf_1_1_source_1a3aac4b9a2502b96be7ef4f8e41b3ca15" prot="public" virt="non-virtual"><scope>erbsland::conf::Source</scope><name>path</name></member>
      <member refid="classerbsland_1_1conf_1_1_source_1a4c2bb920217a2301041fd829a7f7c6ed" prot="public" virt="pure-virtual"><scope>erbsland::conf::Source</scope><name>readLine</name></member>
      <member refid="classerbsland_1_1conf_1_1_source_1a7fc683f19529747ad94725e9d3210e0b" prot="public" virt="virtual"><scope>erbsland::conf::Source</scope><name>~Source</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
